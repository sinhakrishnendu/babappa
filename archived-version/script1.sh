#!/bin/bash

###############################################################################
# Description:
# This script performs a series of steps to conduct phylogenetic analysis
# using IQ-TREE2 and subsequent processing of the resulting tree files. The
# workflow is divided into the following main parts:
#
# 1. Directory Preparation: Creates necessary directories for outputs.
# 2. Defining Parallel Processing Limits: Sets limits for concurrent jobs.
# 3. IQ-TREE2 Phylogenetic Analysis: Searches for MSA files,
#    verifies their existence, and runs the analysis in parallel.
# 4. Tree File Collection: Gathers all generated tree files into a single folder.
# 5. Foreground Branch Selection: Processes tree files with a Python script 
#    to select foreground branches, also executed in parallel.
#
###############################################################################

# ------------------ Setup Output Directories ------------------------------
# The following command creates the required directories if they do not exist:
# - 'iqtreeoutput': Stores the output from IQ-TREE2 runs; each gene gets its own subdirectory.
# - 'treefiles': A common directory where all generated tree files will be collected.
# - 'foregroundbranch': Stores the output of the foreground branch selection process.
mkdir -p iqtreeoutput treefiles foregroundbranch

# ------------------ Define Parallel Job Limits ----------------------------
# PARALLEL_IQTREE_JOBS: The maximum number of parallel IQ-TREE2 analysis processes.
# PARALLEL_JOBS: The maximum number of parallel jobs for the foreground branch selection.
PARALLEL_IQTREE_JOBS=1  
PARALLEL_JOBS=1  

# ------------------ IQ-TREE2 Section ----------------------------------------
# This section deals with running IQ-TREE2 for phylogenetic analysis on a list
# of Multiple Sequence Alignment (MSA) files. The script expects these files to be 
# present in the directory "MSAStopCodonChecked" and to have a suffix '_msa.best.fas'.

# Find all MSA files matching the pattern. The '2>/dev/null' silences errors if none are found.
# script1_optional.sh
# msa_files=($(ls MSAStopCodonChecked/*_msa.best.fas 2>/dev/null))
msa_files=($(ls msa/*_msa.best.fas 2>/dev/null))
if [ ${#msa_files[@]} -eq 0 ]; then
    # Output an error message if no MSA files are found and terminate the script.
    echo "No MSA files found for IQ-TREE2. Skipping phylogenetic analysis."
    exit 1
fi

# Function: run_iqtree
# --------------------
# Purpose:
#   Executes an IQ-TREE2 analysis on a single MSA file.
#
# Parameters:
#   $1 - The path of the MSA file.
#
# Operations:
#   1. Extract the gene name by removing the suffix '_msa.best.fas' from the filename.
#   2. Create a specific output directory under 'iqtreeoutput' for the gene.
#   3. Execute IQ-TREE2 with the following options:
#      - '-s' specifies the input sequence file.
#      - '-st CODON' sets the analysis to use codon models.
#      - '-B 5000' sets 5000 ultrafast bootstrap replicates.
#      - '-alrt 5000' performs 5000 replicates for the approximate likelihood ratio test.
#      - '-bnni' enables a branch-length optimization step post-bootstrap.
#      - '-T AUTO' allows IQ-TREE2 to automatically determine the number of CPU threads.
#      - '-pre' assigns a prefix for the generated output files.
#   4. Redirects both standard output and standard error to a log file in the output directory.
run_iqtree() {
    local file="$1"
    local gene_name=$(basename "$file" _msa.best.fas)
    local output_folder="iqtreeoutput/${gene_name}"

    # Create the gene-specific output directory
    mkdir -p "$output_folder"
    
    # Run IQ-TREE2 and redirect the entire output to a log file.
    iqtree2 -s "$file" -st CODON -B 1000 -alrt 1000 -bnni -T AUTO -pre "$output_folder/$gene_name" \
        > "$output_folder/${gene_name}_iqtree.log" 2>&1
}

# Export the function to make it available in the environment for GNU Parallel.
export -f run_iqtree

# Execute IQ-TREE2 analyses in parallel using GNU Parallel.
# '-j "$PARALLEL_IQTREE_JOBS"' sets the maximum concurrent jobs.
# '::: "${msa_files[@]}"' passes the list of MSA files as arguments to the function.
parallel -j "$PARALLEL_IQTREE_JOBS" run_iqtree ::: "${msa_files[@]}"

# Confirm the completion of the IQ-TREE2 analysis step.
echo "IQ-TREE2 Step Completed."

# ------------------ Tree File Collection Section ---------------------------
# This section collects all '*.treefile' files generated by IQ-TREE2.
# It uses the 'find' command to search recursively within 'iqtreeoutput/' and 
# copies each found tree file into the 'treefiles/' directory.
find iqtreeoutput/ -name "*.treefile" -exec cp {} treefiles/ \;

# Notify the user that all tree files have been successfully copied.
echo "All tree files copied to treefiles/."

# ------------------ Foreground Branch Selection Section --------------------
# This section processes each tree file using a Python script to perform
# the selection of foreground branches. The script '4GroundBranchGenerator.py'
# is expected to take a tree file and an output directory as inputs.

# Function: run_foreground_branch
# --------------------------------
# Purpose:
#   Runs the Python script to process an individual tree file and generate output.
#
# Parameters:
#   $1 - The path to the tree file.
#
# Operations:
#   1. Derives the gene name by removing the '.treefile' extension from the filename.
#   2. Creates an output directory for the gene under 'foregroundbranch'.
#   3. Executes the Python script with the tree file and the gene-specific output folder.
run_foreground_branch() {
    local treefile="$1"
    local gene_name=$(basename "$treefile" .treefile)
    local output_folder="foregroundbranch/${gene_name}"

    # Create the gene-specific output directory for foreground branch data.
    mkdir -p "$output_folder"
    
    # Run the Python script that processes the tree file for foreground branch selection.
    python3 4GroundBranchGenerator.py "$treefile" "$output_folder"
}

# Export the function to enable parallel processing.
export -f run_foreground_branch

# Create an array of all tree file paths from the 'treefiles/' directory.
tree_files=($(ls treefiles/*.treefile 2>/dev/null))

# Execute the foreground branch selection in parallel using GNU Parallel.
# The '-j "$PARALLEL_JOBS"' option sets the number of parallel processes.
parallel -j "$PARALLEL_JOBS" run_foreground_branch ::: "${tree_files[@]}"

# Confirm the completion of the foreground branch selection step.
echo "Foreground Branch Selection Completed."
